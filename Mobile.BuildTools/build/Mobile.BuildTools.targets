<Project>

  <UsingTask TaskName="Mobile.BuildTools.Tasks.SecretsJsonTask" 
             AssemblyFile="$(MSBuildThisFileDirectory)Mobile.BuildTools.dll"/>
  <UsingTask TaskName="Mobile.BuildTools.Tasks.TemplateManifestTask" 
             AssemblyFile="$(MSBuildThisFileDirectory)Mobile.BuildTools.dll"/>
  <UsingTask TaskName="Mobile.BuildTools.Tasks.BuildHostSecretsTask" 
             AssemblyFile="$(MSBuildThisFileDirectory)Mobile.BuildTools.dll"/>
  <UsingTask TaskName="Mobile.BuildTools.Tasks.AutomaticBuildVersioningTask"
             AssemblyFile="$(MSBuildThisFileDirectory)Mobile.BuildTools.dll"/>
  <UsingTask TaskName="Mobile.BuildTools.Tasks.ScssProcessorTask"
             AssemblyFile="$(MSBuildThisFileDirectory)Mobile.BuildTools.dll"/>

  <!-- Properties for the TemplateManifest Task -->
  <PropertyGroup>
    <BuildResourcesDirectoryName Condition=" '$(BuildResourcesDirectoryName)' == '' ">build</BuildResourcesDirectoryName>
    <BuildResourcesDirRootPath Condition=" '$(BuildResourcesDirRootPath)' == '' ">$([System.IO.Path]::Combine($(SolutionDir), $(BuildResourcesDirectoryName)))</BuildResourcesDirRootPath>
    <InfoPlistTemplateName Condition=" '$(InfoPlistTemplateName)' == '' ">BuildTemplateInfo.plist</InfoPlistTemplateName>
    <AndroidManifestTemplateName Condition=" '$(AndroidManifestTemplateName)' == '' ">AndroidTemplateManifest.xml</AndroidManifestTemplateName>
    <TemplateManifestPath Condition=" '$(IsAndroidProject)' ">$([System.IO.Path]::Combine('$(BuildResourcesDirRootPath)', '$(AndroidManifestTemplateName)'))</TemplateManifestPath>
    <ManifestDestinationPath Condition=" '$(ManifestDestinationPath)' == '' And '$(IsAndroidProject)' ">$([System.IO.Path]::Combine('$(MSBuildProjectDirectory)', "Properties", "AndroidManifest.xml"))</ManifestDestinationPath>
    <TemplateManifestPath Condition=" '$(IsiOSProject)' ">$([System.IO.Path]::Combine('$(BuildResourcesDirRootPath)', '$(InfoPlistTemplateName)'))</TemplateManifestPath>
    <ManifestDestinationPath Condition=" '$(ManifestDestinationPath)' == '' And '$(IsiOSProject)' ">$([System.IO.Path]::Combine('$(MSBuildProjectDirectory)', "Info.plist"))</ManifestDestinationPath>
    <ManifestVariablePrefix Condition=" '$(ManifestVariablePrefix)' == '' ">Manifest_</ManifestVariablePrefix>
  </PropertyGroup>

  <Target Name="TemplateManifest" 
          BeforeTargets="CoreCompile;_CoreXamlG;XamlG;XamlC;Build;_CleanMsymArchive;_CleanAppBundle;PrepareForBuild;_CoreCompileInterfaceDefinitions;_SetLatestTargetFrameworkVersion"
          Inputs="$(TemplateManifestPath)"
          Outputs="$(ManifestDestinationPath)">

    <Message Condition=" '$(MobileBuildToolsDebug)' == 'true' " Text="Checking for Platform Template Configurations to Copy" />
    <Message Condition=" '$(MobileBuildToolsDebug)' == 'true' " Text="SdkShortFrameworkIdentifier: '$(_SdkShortFrameworkIdentifier)'" />
    <Message Condition=" '$(MobileBuildToolsDebug)' == 'true' " Text="Prefix: '$(ManifestVariablePrefix)'" />
    <Message Condition=" '$(MobileBuildToolsDebug)' == 'true' " Text="Token: '$(ManifestToken)'" />
    <Message Condition=" '$(MobileBuildToolsDebug)' == 'true' " Text="ManifestTemplatePath: '$(TemplateManifestPath)'" />
    <Message Condition=" '$(MobileBuildToolsDebug)' == 'true' " Text="ManifestOutputPath: '$(ManifestDestinationPath)'" />

    <TemplateManifestTask Prefix="$(ManifestVariablePrefix)"
                          Token="$(ManifestToken)"
                          ManifestTemplatePath="$(TemplateManifestPath)"
                          ManifestOutputPath="$(ManifestDestinationPath)"
                          SdkShortFrameworkIdentifier="$(_SdkShortFrameworkIdentifier)"
                          DebugOutput="$(MobileBuildToolsDebug)" />

  </Target>

  <Target Name="BuildHostSecrets"
          BeforeTargets="Secrets;CoreCompile;_CoreXamlG;XamlG;XamlC;Build"
          Condition=" '$(EnableBuildHostSecrets)' == '' Or '$(EnableBuildHostSecrets)' == 'true' ">
    <PropertyGroup>
      <JsonSecretsFileName Condition=" '$(JsonSecretsFileName)' == '' ">secrets.json</JsonSecretsFileName>
      <JsonSecretsFilePath>$([System.IO.Path]::Combine("$(ProjectDir)", "$(JsonSecretsFileName)"))</JsonSecretsFilePath>
    </PropertyGroup>

    <BuildHostSecretsTask SecretsPrefix="$(BuildHostSecretPrefix)"
                          SecretsJsonFilePath="$(JsonSecretsFilePath)"
                          SdkShortFrameworkIdentifier="$(_SdkShortFrameworkIdentifier)"
                          DebugOutput="$(MobileBuildToolsDebug)" />

  </Target>

  <Target Name="Secrets" 
          BeforeTargets="CoreCompile;_CoreXamlG;XamlG;XamlC;Build">
    <PropertyGroup>
      <JsonSecretsFileName Condition=" '$(JsonSecretsFileName)' == '' ">secrets.json</JsonSecretsFileName>
      <JsonSecretsFilePath>$([System.IO.Path]::Combine("$(ProjectDir)", "$(JsonSecretsFileName)"))</JsonSecretsFilePath>
      <SecretsOutputFileName Condition=" '$(SecretsOutputFileName)' == '' ">Helpers/Secrets.cs</SecretsOutputFileName>
    </PropertyGroup>

    <SecretsJsonTask ProjectBasePath="$(MSBuildProjectDirectory)"
                     SecretsClassName="$(SecretsClassName)"
                     SecretsJsonFilePath="$(JsonSecretsFilePath)"
                     RootNamespace="$(RootNamespace)"
                     OutputPath="$(SecretsOutputPath)"
                     IntermediateOutputPath="$(IntermediateOutputPath)"
                     DebugOutput="$(MobileBuildToolsDebug)">
        <Output ItemName="FilesWrite"
                TaskParameter="GeneratedCodeFiles"/>
        <Output ItemName="Compile"
                TaskParameter="GeneratedCodeFiles"/>
    </SecretsJsonTask>

  </Target>

  <Target Name="AutomaticBuildVersioning"
          AfterTargets="TemplateManifest"
          Condition=" '$(AutomaticVersionBehavior)' == 'PreferBuildNumber' Or '$(AutomaticVersionBehavior)' == 'Timestamp' ">
    <PropertyGroup>
      <AutomaticVersionOffset Condition=" '$(AutomaticVersionOffset)' == '' ">0</AutomaticVersionOffset>
      <AutomaticVersionEnvironment Condition=" '$(AutomaticVersionEnvironment)' == '' ">All</AutomaticVersionEnvironment>
    </PropertyGroup>

    <AutomaticBuildVersioningTask Behavior="$(AutomaticVersionBehavior)"
                                  VersionEnvironment="$(AutomaticVersionEnvironment)"
                                  VersionOffset="$(AutomaticVersionOffset)"
                                  ProjectPath="$(MSBuildProjectDirectory)"
                                  TargetFrameworkIdentifier="$(TargetFrameworkIdentifier)"
                                  SdkShortFrameworkIdentifier="$(_SdkShortFrameworkIdentifier)"
                                  DebugOutput="$(MobileBuildToolsDebug)" />
  </Target>

  <Target Name="IPACopyToStagingDirectory"
          AfterTargets="_ZipIpa"
          DependsOnTargets="_ZipIpa"
          Condition=" '$(DisableBuildToolsArtifactCopy)' != 'true' And !'$(IsAppCenter)' ">

    <PropertyGroup>
      <__IpaFileName>$([System.IO.Path]::GetFileNameWithoutExtension('$(IpaPackagePath)'))</__IpaFileName>
    </PropertyGroup>

    <ItemGroup>
      <__Generated_dSYM Include="$([System.IO.Path]::GetDirectoryName('$(IpaPackagePath)'))\**" />
    </ItemGroup>

    <Copy SourceFiles="@(__Generated_dSYM)" 
          DestinationFolder="$(BuildToolsArtifactOutputPath)\$(__IpaFileName).app.dSYM\%(RecursiveDir)" 
          SkipUnchangedFiles="false" 
          OverwriteReadOnlyFiles="true" 
          Retries="3" 
          RetryDelayMilliseconds="300" />

    <Copy SourceFiles="$(IpaPackagePath)" 
          DestinationFiles="$(BuildToolsArtifactOutputPath)\$([System.IO.Path]::GetFileName('$(IpaPackagePath)'))" />

  </Target>

  <Target Name="_CollectAPK"
          BeforeTargets="APKCopyToStagingDirectory">

    <ItemGroup>
      <__Generated_APK Include="$(OutputPath)\**\*.apk" />
    </ItemGroup>

    <Message Text="@(__Generated_APK)" />

  </Target>

  <Target Name="APKCopyToStagingDirectory"
          AfterTargets="_CreateBaseApk;_CollectAPK"
          DependsOnTargets="_CreateBaseApk;_CollectAPK"
          Condition=" '$(DisableBuildToolsArtifactCopy)' != 'false' And !'$(IsAppCenter)' "
          Inputs="@(__Generated_APK)"
          Outputs="@(__Generated_APK -> '$(BuildToolsArtifactOutputPath)%(Filename)%(Extension)')">

    <Copy SourceFiles="$(__Generated_APK)" 
          DestinationFolder="$(BuildToolsArtifactOutputPath)" />

  </Target>

  <PropertyGroup>
    <CssGDependsOn>
      _CollectScss;
      _EnsureScssRuntimeIsAvailable;
      ProcessScss;
      $(CssGDependsOn);
    </CssGDependsOn>
    <PrepareResourcesDependsOn>
      _CollectScss;
      _EnsureScssRuntimeIsAvailable;
      ProcessScss;
      $(PrepareResourcesDependsOn)
    </PrepareResourcesDependsOn>
    <ProcessScssDependsOn>
      _CollectScss;
      _EnsureScssRuntimeIsAvailable;
    </ProcessScssDependsOn>
  </PropertyGroup>

  <Target Name="_CollectScss">
    <ItemGroup>
      <_AllScss Include="**\*.scss" />
      <_PartialScss Include="@(_AllScss)" Condition="$([MSBuild]::ValueOrDefault('%(Filename)', '').StartsWith('_'))" />
      <_Scss Include="@(_AllScss)" Exclude="@(_PartialScss)" />
    </ItemGroup>
  </Target>

  <Target Name="_EnsureScssRuntimeIsAvailable">
    <PropertyGroup>
      <ScssRuntime Condition=" '$(ScssRuntime)' == '' AND '$(OS)' == 'Unix'">osx-x64</ScssRuntime>
      <ScssRuntime Condition=" '$(ScssRuntime)' == '' ">win-x86</ScssRuntime>
      <!-- <ScssRuntime Condition=" '$(ScssRuntime)' == '' ">win-x64</ScssRuntime> -->
    </PropertyGroup>
    <ItemGroup>
      <LibSass Include="$(MSBuildThisFileDirectory)runtimes\$(ScssRuntime)\native\libsass.*" />
    </ItemGroup>
    <Copy SourceFiles="@(LibSass)"
          DestinationFiles="$(MSBuildThisFileDirectory)%(Filename)%(Extension)"
          Condition="!Exists('$(MSBuildThisFileDirectory)%(Filename)%(Extension)')" />
  </Target>

  <Target Name="ProcessScss" 
          BeforeTargets="CssG"
          Inputs="@(_Scss);@(_PartialScc)" 
          Outputs="@(_Scss -> '$(IntermediateOutputPath)%(RecursiveDir)%(Filename).css')">

    <PropertyGroup>
      <ProcessScssDebug Condition=" '$(ProcessScssDebug)' == '' ">$(MobileBuildToolsDebug)</ProcessScssDebug>
    </PropertyGroup>

    <ScssProcessorTask OutputDirectory="$(IntermediateOutputPath)"
                       ScssFiles="@(_Scss)"
                       DebugOutput="$(ProcessScssDebug)">
      <Output ItemName="GeneratedFile"
              TaskParameter="GeneratedCssFiles"/>
      <Output ItemName="FilesWrite"
              TaskParameter="GeneratedCssFiles"/>
    </ScssProcessorTask>

    <ItemGroup>
      <EmbeddedResource Include="@(_Scss -> '$(IntermediateOutputPath)%(RecursiveDir)%(Filename).css')" 
                        Link="%(RecursiveDir)%(Filename).css" />
    </ItemGroup>

  </Target>

</Project>